/home/tst008/pj/lean-tpe-public/src/evaluation.lean:155:0: error: unknown identifier 't'
/home/tst008/pj/lean-tpe-public/src/evaluation.lean:143:5: warning: declaration 'main_t_at' uses sorry
/home/tst008/pj/lean-tpe-public/src/backends/bfs/baseline.lean:3:0: warning: imported file '/home/tst008/pj/lean-tpe-public/src/evaluation.lean' uses sorry
/home/tst008/pj/lean-tpe-public/src/evaluation_step.lean:5:0: warning: imported file '/home/tst008/pj/lean-tpe-public/src/evaluation.lean' uses sorry
/home/tst008/pj/lean-tpe-public/src/evaluation/bfs/baseline.lean:3:0: warning: imported file '/home/tst008/pj/lean-tpe-public/src/evaluation.lean' uses sorry
[evaluation_harness_from_decls_file] GOT 32 NAMES
[evaluation_harness_from_decls_file] WARNING: SKIPPING 1
[evaluation_harness_from_decls_file] ENTERING run_proof_search_core
[run_proof_search_step] GOT TSD AT DECL list.partition_eq_filter_filter
[run_proof_search_step] GOT ENV AT DECL list.partition_eq_filter_filter
[run_proof_search_step] SET ENV AT DECL list.partition_eq_filter_filter
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (p : α → Prop)
  [_inst_1 : decidable_pred p] (l : list α), partition p l = (filter p l, filter (not ∘ p) l)
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p]
   (l : list α), partition p l = (filter p l, filter (not ∘ p) l) 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
       partition p l = (filter p l, filter (not ∘ p) l))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
       partition p l = (filter p l, filter (not ∘ p) l))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: [(some (SUCCESS!
        NEW_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
            partition p l = (filter p l, filter (not ∘ p) l)
        VAL: (),
        (dsimp at *, 0)))]
[bfs_step] SUCCESSFUL CANDIDATES: [(SUCCESS!
  NEW_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
      partition p l = (filter p l, filter (not ∘ p) l)
  VAL: (),
  (dsimp at *, 0))]
[bfs_step] NODES BEFORE SORTING: [BFSNode.mk (⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p]
   (l : list α), partition p l = (filter p l, filter (not ∘ p) l) 0 [dsimp at *] 1)]
[bfs_step] NODES AFTER SORTING: [BFSNode.mk (⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p]
   (l : list α), partition p l = (filter p l, filter (not ∘ p) l) 0 [dsimp at *] 1)]
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p]
   (l : list α), partition p l = (filter p l, filter (not ∘ p) l) 0 [dsimp at *] 1)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
       partition p l = (filter p l, filter (not ∘ p) l))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
       partition p l = (filter p l, filter (not ∘ p) l))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (p : α → Prop) [_inst_1 : decidable_pred p] (l : list α),
    partition p l = (filter p l, filter (not ∘ p) l)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.filter_append
[run_proof_search_step] GOT ENV AT DECL list.filter_append
[run_proof_search_step] SET ENV AT DECL list.filter_append
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
  (l₁ l₂ : list α), filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l₁ l₂ : list α), filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂ 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
       filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
       filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: [(some (SUCCESS!
        NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
            filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
        VAL: (),
        (dsimp at *, 0)))]
[bfs_step] SUCCESSFUL CANDIDATES: [(SUCCESS!
  NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
      filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
  VAL: (),
  (dsimp at *, 0))]
[bfs_step] NODES BEFORE SORTING: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l₁ l₂ : list α), filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂ 0 [dsimp at *] 1)]
[bfs_step] NODES AFTER SORTING: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l₁ l₂ : list α), filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂ 0 [dsimp at *] 1)]
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l₁ l₂ : list α), filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂ 0 [dsimp at *] 1)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
       filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
       filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l₁ l₂ : list α),
    filter p (l₁ ++ l₂) = filter p l₁ ++ filter p l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.filter_sublist
[run_proof_search_step] GOT ENV AT DECL list.filter_sublist
[run_proof_search_step] SET ENV AT DECL list.filter_sublist
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
  (l : list α), filter p l <+ l
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l : list α), filter p l <+ l 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: [(some (SUCCESS!
        NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
        VAL: (),
        (dsimp at *, 0)))]
[bfs_step] SUCCESSFUL CANDIDATES: [(SUCCESS!
  NEW_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
  VAL: (),
  (dsimp at *, 0))]
[bfs_step] NODES BEFORE SORTING: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l : list α), filter p l <+ l 0 [dsimp at *] 1)]
[bfs_step] NODES AFTER SORTING: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l : list α), filter p l <+ l 0 [dsimp at *] 1)]
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p]
   (l : list α), filter p l <+ l 0 [dsimp at *] 1)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {p : α → Prop} [h : decidable_pred p] (l : list α), filter p l <+ l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.append_nil
[run_proof_search_step] GOT ENV AT DECL list.append_nil
[run_proof_search_step] SET ENV AT DECL list.append_nil
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (t : list α), t ++ nil = t 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (t : list α), t ++ nil = t)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (t : list α), t ++ nil = t)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (t : list α), t ++ nil = t
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.append_assoc
[run_proof_search_step] GOT ENV AT DECL list.append_assoc
[run_proof_search_step] SET ENV AT DECL list.append_assoc
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (s t u : list α),
    s ++ t ++ u = s ++ (t ++ u)
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (s t u : list α),
     s ++ t ++ u = s ++ (t ++ u) 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t u : list α), s ++ t ++ u = s ++ (t ++ u)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.length_append
[run_proof_search_step] GOT ENV AT DECL list.length_append
[run_proof_search_step] SET ENV AT DECL list.length_append
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (s t : list α),
    (s ++ t).length = s.length + t.length
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (s t : list α),
     (s ++ t).length = s.length + t.length 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (s t : list α), (s ++ t).length = s.length + t.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.length_repeat
[run_proof_search_step] GOT ENV AT DECL list.length_repeat
[run_proof_search_step] SET ENV AT DECL list.length_repeat
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ),
    (repeat a n).length = n
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (a : α) (n : ℕ),
     (repeat a n).length = n 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (a : α) (n : ℕ), (repeat a n).length = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.length_tail
[run_proof_search_step] GOT ENV AT DECL list.length_tail
[run_proof_search_step] SET ENV AT DECL list.length_tail
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (l : list α),
    l.tail.length = l.length - 1
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (l : list α),
     l.tail.length = l.length - 1 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (l : list α), l.tail.length = l.length - 1)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (l : list α), l.tail.length = l.length - 1)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), l.tail.length = l.length - 1
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.map_append
[run_proof_search_step] GOT ENV AT DECL list.map_append
[run_proof_search_step] SET ENV AT DECL list.map_append
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β)
  (l₁ l₂ : list α), map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {β : Type v} (f : α → β)
   (l₁ l₂ : list α), map f (l₁ ++ l₂) = map f l₁ ++ map f l₂ 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
       map f (l₁ ++ l₂) = map f l₁ ++ map f l₂)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
       map f (l₁ ++ l₂) = map f l₁ ++ map f l₂)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l₁ l₂ : list α),
    map f (l₁ ++ l₂) = map f l₁ ++ map f l₂
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.map_id
[run_proof_search_step] GOT ENV AT DECL list.map_id
[run_proof_search_step] SET ENV AT DECL list.map_id
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} (l : list α), map id l = l 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (l : list α), map id l = l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} (l : list α), map id l = l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} (l : list α), map id l = l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.map_map
[run_proof_search_step] GOT ENV AT DECL list.map_map
[run_proof_search_step] SET ENV AT DECL list.map_map
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w}
  (g : β → γ) (f : α → β) (l : list α), map g (map f l) = map (g ∘ f) l
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ)
   (f : α → β) (l : list α), map g (map f l) = map (g ∘ f) l 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
       map g (map f l) = map (g ∘ f) l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
       map g (map f l) = map (g ∘ f) l)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} {γ : Type w} (g : β → γ) (f : α → β) (l : list α),
    map g (map f l) = map (g ∘ f) l
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.length_map
[run_proof_search_step] GOT ENV AT DECL list.length_map
[run_proof_search_step] SET ENV AT DECL list.length_map
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β)
  (l : list α), (map f l).length = l.length
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α),
     (map f l).length = l.length 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → β) (l : list α), (map f l).length = l.length
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.nil_bind
[run_proof_search_step] GOT ENV AT DECL list.nil_bind
[run_proof_search_step] SET ENV AT DECL list.nil_bind
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β),
    nil.bind f = nil
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {β : Type v} (f : α → list β),
     nil.bind f = nil 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (f : α → list β), nil.bind f = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.cons_bind
[run_proof_search_step] GOT ENV AT DECL list.cons_bind
[run_proof_search_step] SET ENV AT DECL list.cons_bind
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α)
  (f : α → list β), (x :: xs).bind f = f x ++ xs.bind f
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α)
   (f : α → list β), (x :: xs).bind f = f x ++ xs.bind f 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β), (x :: xs).bind f = f x ++ xs.bind f)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β), (x :: xs).bind f = f x ++ xs.bind f)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (x : α) (xs : list α) (f : α → list β),
    (x :: xs).bind f = f x ++ xs.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.append_bind
[run_proof_search_step] GOT ENV AT DECL list.append_bind
[run_proof_search_step] SET ENV AT DECL list.append_bind
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α)
  (f : α → list β), (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α)
   (f : α → list β), (xs ++ ys).bind f = xs.bind f ++ ys.bind f 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β), (xs ++ ys).bind f = xs.bind f ++ ys.bind f)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β), (xs ++ ys).bind f = xs.bind f ++ ys.bind f)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u} {β : Type v} (xs ys : list α) (f : α → list β),
    (xs ++ ys).bind f = xs.bind f ++ ys.bind f
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL list.qsort_nil
[run_proof_search_step] GOT ENV AT DECL list.qsort_nil
[run_proof_search_step] SET ENV AT DECL list.qsort_nil
[run_proof_search_step] ADDED OPEN NAMESPACES [list]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool),
    qsort lt nil = nil
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {α : Type u_1} (lt : α → α → bool),
     qsort lt nil = nil 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {α : Type u_1} (lt : α → α → bool), qsort lt nil = nil
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bodd_bit
[run_proof_search_step] GOT ENV AT DECL nat.bodd_bit
[run_proof_search_step] SET ENV AT DECL nat.bodd_bit
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (b : bool) (n : ℕ), (bit b n).bodd = b)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (b : bool) (n : ℕ), (bit b n).bodd = b)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), (bit b n).bodd = b
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.shiftl'_sub
[run_proof_search_step] GOT ENV AT DECL nat.shiftl'_sub
[run_proof_search_step] SET ENV AT DECL nat.shiftl'_sub
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ},
    k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ},
     k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (m : ℕ) {n k : ℕ}, k ≤ n → shiftl' b m (n - k) = (shiftl' b m n).shiftr k
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.test_bit_succ
[run_proof_search_step] GOT ENV AT DECL nat.test_bit_succ
[run_proof_search_step] SET ENV AT DECL nat.test_bit_succ
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ),
    (bit b n).test_bit m.succ = n.test_bit m
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (m : ℕ) (b : bool) (n : ℕ),
     (bit b n).test_bit m.succ = n.test_bit m 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (m : ℕ) (b : bool) (n : ℕ), (bit b n).test_bit m.succ = n.test_bit m
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bitwise_bit_aux
[run_proof_search_step] GOT ENV AT DECL nat.bitwise_bit_aux
[run_proof_search_step] SET ENV AT DECL nat.bitwise_bit_aux
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) (bit ff 0) 0)
          (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) (bit ff 0) 0)
            (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) (bit ff 0) 0)
            (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) (bit ff 0) 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: [(some (SUCCESS!
        NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
            f ff ff = ff →
            (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
               λ (n : ℕ), cond (f ff tt) n 0)
        VAL: (),
        (dsimp at *, 0))),
 (some (SUCCESS!
        NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
            f ff ff = ff →
            (binary_rec (cond (f tt ff) 0 0)
                 (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
               λ (n : ℕ), cond (f ff tt) n 0)
        VAL: (),
        (simp at *, 0)))]
[bfs_step] SUCCESSFUL CANDIDATES: [(SUCCESS!
  NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
      f ff ff = ff →
      (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
         λ (n : ℕ), cond (f ff tt) n 0)
  VAL: (),
  (dsimp at *, 0)),
 (SUCCESS!
  NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
      f ff ff = ff →
      (binary_rec (cond (f tt ff) 0 0)
           (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
         λ (n : ℕ), cond (f ff tt) n 0)
  VAL: (),
  (simp at *, 0))]
[bfs_step] NODES BEFORE SORTING: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [dsimp at *] 1),
 BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0)
          (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *] 1)]
[bfs_step] NODES AFTER SORTING: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0)
          (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *] 1),
 BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [dsimp at *] 1)]
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0)
          (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *] 1),
 BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [dsimp at *] 1)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) 0 0)
            (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) 0 0)
            (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0)
         (λ (b : bool) (n : ℕ) (_x : (λ (_x : ℕ), ℕ) n), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: [(some (SUCCESS!
        NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
            f ff ff = ff →
            (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
               λ (n : ℕ), cond (f ff tt) n 0)
        VAL: (),
        (dsimp at *, 0)))]
[bfs_step] SUCCESSFUL CANDIDATES: [(SUCCESS!
  NEW_STATE: ⊢ ∀ {f : bool → bool → bool},
      f ff ff = ff →
      (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
         λ (n : ℕ), cond (f ff tt) n 0)
  VAL: (),
  (dsimp at *, 0))]
[bfs_step] NODES BEFORE SORTING: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *, dsimp at *] 2)]
[bfs_step] NODES AFTER SORTING: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *, dsimp at *] 2)]
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [dsimp at *] 1),
 BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *, dsimp at *] 2)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
        λ (n : ℕ), cond (f ff tt) n 0) 0 [simp at *, dsimp at *] 2)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
          λ (n : ℕ), cond (f ff tt) n 0))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    (binary_rec (cond (f tt ff) 0 0) (λ (b : bool) (n _x : ℕ), bit (f ff b) (cond (f ff tt) n 0)) =
       λ (n : ℕ), cond (f ff tt) n 0)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bitwise_zero_left
[run_proof_search_step] GOT ENV AT DECL nat.bitwise_zero_left
[run_proof_search_step] SET ENV AT DECL nat.bitwise_zero_left
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ),
    bitwise f 0 n = cond (f ff tt) n 0
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (f : bool → bool → bool) (n : ℕ),
     bitwise f 0 n = cond (f ff tt) n 0 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool) (n : ℕ), bitwise f 0 n = cond (f ff tt) n 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bitwise_zero_right
[run_proof_search_step] GOT ENV AT DECL nat.bitwise_zero_right
[run_proof_search_step] SET ENV AT DECL nat.bitwise_zero_right
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (f : bool → bool → bool),
    f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (f : bool → bool → bool),
     f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), f ff ff = ff → ∀ (m : ℕ), bitwise f m 0 = cond (f tt ff) m 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bitwise_zero
[run_proof_search_step] GOT ENV AT DECL nat.bitwise_zero
[run_proof_search_step] SET ENV AT DECL nat.bitwise_zero
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool), bitwise f 0 0 = 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool), bitwise f 0 0 = 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
VAL: ()
[try_candidate] CAPTURED RESULT: SUCCESS!
NEW_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
VAL: ()
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), bitwise f 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: [(some (SUCCESS!
        NEW_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
        VAL: (),
        (simp at *, 0)))]
[bfs_step] SUCCESSFUL CANDIDATES: [(SUCCESS!
  NEW_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
  VAL: (),
  (simp at *, 0))]
[bfs_step] NODES BEFORE SORTING: [BFSNode.mk (⊢ ∀ (f : bool → bool → bool),
     cond (f ff tt) 0 0 = 0 0 [simp at *] 1)]
[bfs_step] NODES AFTER SORTING: [BFSNode.mk (⊢ ∀ (f : bool → bool → bool),
     cond (f ff tt) 0 0 = 0 0 [simp at *] 1)]
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (f : bool → bool → bool),
     cond (f ff tt) 0 0 = 0 0 [simp at *] 1)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (f : bool → bool → bool), cond (f ff tt) 0 0 = 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bitwise_bit
[run_proof_search_step] GOT ENV AT DECL nat.bitwise_bit
[run_proof_search_step] SET ENV AT DECL nat.bitwise_bit
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff →
     ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n) 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable
    (∀ {f : bool → bool → bool},
       f ff ff = ff →
       ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff →
    ∀ (a : bool) (m : ℕ) (b : bool) (n : ℕ), bitwise f (bit a m) (bit b n) = bit (f a b) (bitwise f m n)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bitwise_swap
[run_proof_search_step] GOT ENV AT DECL nat.bitwise_swap
[run_proof_search_step] SET ENV AT DECL nat.bitwise_swap
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ {f : bool → bool → bool},
    f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ {f : bool → bool → bool},
     f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f) 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f))
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ {f : bool → bool → bool}, f ff ff = ff → bitwise (function.swap f) = function.swap (bitwise f)
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bodd_succ
[run_proof_search_step] GOT ENV AT DECL nat.bodd_succ
[run_proof_search_step] SET ENV AT DECL nat.bodd_succ
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (n : ℕ), n.succ.bodd = bnot n.bodd)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (n : ℕ), n.succ.bodd = bnot n.bodd)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n.succ.bodd = bnot n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bodd_mul
[run_proof_search_step] GOT ENV AT DECL nat.bodd_mul
[run_proof_search_step] SET ENV AT DECL nat.bodd_mul
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (m n : ℕ), (m * n).bodd = m.bodd && n.bodd
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.mod_two_of_bodd
[run_proof_search_step] GOT ENV AT DECL nat.mod_two_of_bodd
[run_proof_search_step] SET ENV AT DECL nat.mod_two_of_bodd
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (n : ℕ), n % 2 = cond n.bodd 1 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (n : ℕ), n % 2 = cond n.bodd 1 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), n % 2 = cond n.bodd 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bodd_add_div2
[run_proof_search_step] GOT ENV AT DECL nat.bodd_add_div2
[run_proof_search_step] SET ENV AT DECL nat.bodd_add_div2
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (n : ℕ), cond n.bodd 1 0 + 2 * n.div2 = n
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.bit_val
[run_proof_search_step] GOT ENV AT DECL nat.bit_val
[run_proof_search_step] SET ENV AT DECL nat.bit_val
[run_proof_search_step] ADDED OPEN NAMESPACES [nat]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (b : bool) (n : ℕ), bit b n = 2 * n + cond b 1 0
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
[run_proof_search_step] GOT TSD AT DECL nat.gcd_zero_left
[run_proof_search_step] GOT ENV AT DECL nat.gcd_zero_left
[run_proof_search_step] SET ENV AT DECL nat.gcd_zero_left
[run_proof_search_step] ADDED OPEN NAMESPACES [nat, well_founded]
[run_proof_search_step] REBUILT TACTIC STATE, ENTERING SEARCH CORE WITH TIMEOUT 300000
[run_proof_search_step] TACTIC STATE BEFORE SEARCH CORE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[run_proof_search_step] NO GOT DECL
[bfs_step] ENTERING, QUEUE STATE: [BFSNode.mk (⊢ ∀ (x : ℕ), 0.gcd x = x 0 [] 0)]
[bfs_step] QUERYING API
[bfs_step] RESPONSE MSG [["refl",
  "exact dec_trivial",
  "assumption",
  "tactic.intros1",
  "tactic.auto_cases",
  "apply_auto_param",
  "dsimp at *",
  "simp at *",
  "ext1",
  "fsplit",
  "injections_and_clear",
  "solve_by_elim",
  "norm_cast"],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[bfs_step] RUNNING DECODE RESPONSE WITH TAC_TIMEOUT 5000
[run_proof_search_step] NO GOT DECL 
[run_all_beam_candidates] DEDUP_UNWRAPPED CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[run_all_beam_candidates] CANDIDATES: [(refl, 0),
 (exact dec_trivial, 0),
 (assumption, 0),
 (tactic.intros1, 0),
 (tactic.auto_cases, 0),
 (apply_auto_param, 0),
 (dsimp at *, 0),
 (simp at *, 0),
 (ext1, 0),
 (fsplit, 0),
 (injections_and_clear, 0),
 (solve_by_elim, 0),
 (norm_cast, 0)]
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: refl
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: refl
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: reflexivity tactic failed, target is not a relation application with the expected property.
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: exact dec_trivial
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: exact dec_trivial
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (x : ℕ), 0.gcd x = x)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: failed to synthesize type class instance for
⊢ decidable (∀ (x : ℕ), 0.gcd x = x)
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: assumption
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: assumption
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: assumption tactic failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.intros1
[try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.intros1
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: tactic.auto_cases
[try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on tactic.auto_cases
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: apply_auto_param
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: apply_auto_param
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: match failed
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: dsimp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: dsimp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: dsimplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: simp at *
[get_tac_and_capture_result] PARSE SUCCESSFUL
[get_tac_and_capture_result] TRYING TACTIC: simp at *
[get_tac_and_capture_result] RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: simplify tactic failed to simplify
POS: (some ⟨1, 2⟩)
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: ext1
[try_get_tac_and_capture_result] parse_itactic failed on ext1
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on ext1
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: fsplit
[try_get_tac_and_capture_result] parse_itactic failed on fsplit
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on fsplit
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: injections_and_clear
[try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on injections_and_clear
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: solve_by_elim
[try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on solve_by_elim
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[get_tac_and_capture_result] PARSING TACTIC: norm_cast
[try_get_tac_and_capture_result] parse_itactic failed on norm_cast
[try_candidate] CAPTURED RESULT: EXCEPTION!
MSG: [try_get_tac_and_capture_result] parse_itactic failed on norm_cast
POS: none
OLD_STATE: ⊢ ∀ (x : ℕ), 0.gcd x = x
[try_candidate] ENTERING
[try_candidate] READ TACTIC STATE
[try_candidate] END OF LOOP
[run_all_beam_candidates] EXITING TRY_CANDIDATE LOOP
[run_all_beam_candidates] SUCCESSFUL CANDIDATES: []
[bfs_step] SUCCESSFUL CANDIDATES: []
[bfs_step] NODES BEFORE SORTING: []
[bfs_step] NODES AFTER SORTING: []
DONE FLAG: ff
[bfs_step] ENTERING, QUEUE STATE: []
[bfs_step] queue empty
